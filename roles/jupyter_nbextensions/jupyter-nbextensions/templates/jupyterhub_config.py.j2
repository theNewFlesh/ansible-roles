# Configuration file for jupyterhub.

#------------------------------------------------------------------------------
# Configurable configuration
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# LoggingConfigurable configuration
#------------------------------------------------------------------------------

# A parent class for Configurables that log.
#
# Subclasses have a log trait, and the default behavior is to get the logger
# from the currently running Application.

#------------------------------------------------------------------------------
# SingletonConfigurable configuration
#------------------------------------------------------------------------------

# A configurable that only allows one instance.
#
# This class is for classes that should only have one instance of itself or
# *any* subclass. To create and retrieve such a class use the
# :meth:`SingletonConfigurable.instance` method.

#------------------------------------------------------------------------------
# Application configuration
#------------------------------------------------------------------------------

# This is an application.

# The date format used by logging formatters for %(asctime)s
{% if jhc_application_log_datefmt != '%Y-%m-%d %H:%M:%S' %}
c.Application.log_datefmt = '{{ jhc_application_log_datefmt }}'
{% endif %}

# The Logging format template
{% if jhc_application_log_format != '[%(name)s]%(highlevel)s %(message)s' %}
c.Application.log_format = '{{ jhc_application_log_format }}'
{% endif %}

# Set the log level by value or name.
{% if jhc_application_log_level != 30 %}
c.Application.log_level = {{ jhc_application_log_level }}
{% endif %}

#------------------------------------------------------------------------------
# JupyterHub configuration
#------------------------------------------------------------------------------

# An Application for starting a Multi-User Jupyter Notebook server.

# Grant admin users permission to access single-user servers.
#
# Users should be properly informed if this is enabled.
{% if jhc_jupyterhub_admin_access != False %}
c.JupyterHub.admin_access = {{ jhc_jupyterhub_admin_access }}
{% endif %}

# Answer yes to any questions (e.g. confirm overwrite)
{% if jhc_jupyterhub_answer_yes != False %}
c.JupyterHub.answer_yes = {{ jhc_jupyterhub_answer_yes }}
{% endif %}

# Dict of token:username to be loaded into the database.
#
# Allows ahead-of-time generation of API tokens for use by services.
{% if jhc_jupyterhub_api_tokens != {} %}
c.JupyterHub.api_tokens = {
  {% for key, val in jhc_jupyterhub_api_tokens.items()[:-1] %}
    '{{ key }}': '{{ val }}',
  {% endfor %}
  {% for key, val in jhc_jupyterhub_api_tokens.items()[-1:] %}
    '{{ key }}': '{{ val }}'
  {% endfor %}
}
{% endif %}

# Class for authenticating users.
#
# This should be a class with the following form:
#
# - constructor takes one kwarg: `config`, the IPython config object.
#
# - is a tornado.gen.coroutine
# - returns username on success, None on failure
# - takes two arguments: (handler, data),
#   where `handler` is the calling web.RequestHandler,
#   and `data` is the POST form data from the login page.
{% if jhc_jupyterhub_authenticator_class != 'jupyterhub.auth.PAMAuthenticator' %}
c.JupyterHub.authenticator_class = '{{ jhc_jupyterhub_authenticator_class }}'
{% endif %}

# The base URL of the entire application
{% if jhc_jupyterhub_base_url != '/' %}
c.JupyterHub.base_url = '{{ jhc_jupyterhub_base_url }}'
{% endif %}

# Whether to shutdown the proxy when the Hub shuts down.
#
# Disable if you want to be able to teardown the Hub while leaving the proxy
# running.
#
# Only valid if the proxy was starting by the Hub process.
#
# If both this and cleanup_servers are False, sending SIGINT to the Hub will
# only shutdown the Hub, leaving everything else running.
#
# The Hub should be able to resume from database state.
{% if jhc_jupyterhub_cleanup_proxy != True %}
c.JupyterHub.cleanup_proxy = {{ jhc_jupyterhub_cleanup_proxy }}
{% endif %}

# Whether to shutdown single-user servers when the Hub shuts down.
#
# Disable if you want to be able to teardown the Hub while leaving the single-
# user servers running.
#
# If both this and cleanup_proxy are False, sending SIGINT to the Hub will only
# shutdown the Hub, leaving everything else running.
#
# The Hub should be able to resume from database state.
{% if jhc_jupyterhub_cleanup_servers != True %}
c.JupyterHub.cleanup_servers = {{ jhc_jupyterhub_cleanup_servers }}
{% endif %}

# The config file to load
{% if _jhc_config != '' %}
c.JupyterHub.config_file = '{{ _jhc_config }}'
{% endif %}

# Confirm that JupyterHub should be run without SSL. This is **NOT RECOMMENDED**
# unless SSL termination is being handled by another layer.
{% if jhc_jupyterhub_confirm_no_ssl != False %}
c.JupyterHub.confirm_no_ssl = {{ jhc_jupyterhub_confirm_no_ssl }}
{% endif %}

# Number of days for a login cookie to be valid. Default is two weeks.
{% if jhc_jupyterhub_cookie_max_age_days != 14 %}
c.JupyterHub.cookie_max_age_days = {{ jhc_jupyterhub_cookie_max_age_days }}
{% endif %}

# The cookie secret to use to encrypt cookies.
#
# Loaded from the JPY_COOKIE_SECRET env variable by default.
{% if jhc_jupyterhub_cookie_secret != '' %}
c.JupyterHub.cookie_secret = b'{{ jhc_jupyterhub_cookie_secret }}'
{% endif %}

# File in which to store the cookie secret.
{% if _jhc_cookie != '' %}
c.JupyterHub.cookie_secret_file = '{{ _jhc_cookie }}'
{% endif %}

# The location of jupyterhub data files (e.g. /usr/local/share/jupyter/hub)
{% if jhc_jupyterhub_data_files_path != '' %}
c.JupyterHub.data_files_path = '{{ jhc_jupyterhub_data_files_path }}'
{% endif %}

# Include any kwargs to pass to the database connection. See
# sqlalchemy.create_engine for details.
{% if jhc_jupyterhub_db_kwargs != {} %}
c.JupyterHub.db_kwargs = {
  {% for key, val in jhc_jupyterhub_db_kwargs.items()[:-1] %}
    '{{ key }}': '{{ val }}',
  {% endfor %}
  {% for key, val in jhc_jupyterhub_db_kwargs.items()[-1:] %}
    '{{ key }}': '{{ val }}'
  {% endfor %}
}
{% endif %}

# url for the database. e.g. `sqlite:///jupyterhub.sqlite`
{% if jhc_jupyterhub_db_url != 'sqlite:///jupyterhub.sqlite' %}
c.JupyterHub.db_url = '{{ jhc_jupyterhub_db_url }}'
{% endif %}

# log all database transactions. This has A LOT of output
{% if jhc_jupyterhub_debug_db != False %}
c.JupyterHub.debug_db = {{ jhc_jupyterhub_debug_db }}
{% endif %}

# show debug output in configurable-http-proxy
{% if jhc_jupyterhub_debug_proxy != False %}
c.JupyterHub.debug_proxy = {{ jhc_jupyterhub_debug_proxy }}
{% endif %}

# Send JupyterHub's logs to this file.
#
# This will *only* include the logs of the Hub itself, not the logs of the proxy
# or any single-user servers.
{% if jhc_jupyterhub_extra_log_file != '' %}
c.JupyterHub.extra_log_file = '{{ jhc_jupyterhub_extra_log_file }}'
{% endif %}

# Extra log handlers to set on JupyterHub logger
{% if jhc_jupyterhub_extra_log_handlers != [] %}
c.JupyterHub.extra_log_handlers = ['{{ jhc_jupyterhub_extra_log_handlers|join("', '") }}']
{% endif %}

# Generate default config file
{% if jhc_jupyterhub_generate_config != False %}
c.JupyterHub.generate_config = {{ jhc_jupyterhub_generate_config }}
{% endif %}

# The ip for this process
{% if jhc_jupyterhub_hub_ip != '127.0.0.1' %}
c.JupyterHub.hub_ip = '{{ jhc_jupyterhub_hub_ip }}'
{% endif %}

# The port for this process
{% if jhc_jupyterhub_hub_port != 8081 %}
c.JupyterHub.hub_port = {{ jhc_jupyterhub_hub_port }}
{% endif %}

# The prefix for the hub server. Must not be '/'
{% if jhc_jupyterhub_hub_prefix != '/hub/' %}
c.JupyterHub.hub_prefix = '{{ jhc_jupyterhub_hub_prefix }}'
{% endif %}

# The public facing ip of the whole application (the proxy)
{% if jhc_jupyterhub_ip != '' %}
c.JupyterHub.ip = '{{ jhc_jupyterhub_ip }}'
{% endif %}

# Supply extra arguments that will be passed to Jinja environment.
{% if jhc_jupyterhub_jinja_environment_options != {} %}
c.JupyterHub.jinja_environment_options = {
  {% for key, val in jhc_jupyterhub_jinja_environment_options.items()[:-1] %}
    '{{ key }}': '{{ val }}',
  {% endfor %}
  {% for key, val in jhc_jupyterhub_jinja_environment_options.items()[-1:] %}
    '{{ key }}': '{{ val }}'
  {% endfor %}
}
{% endif %}

# Interval (in seconds) at which to update last-activity timestamps.
{% if jhc_jupyterhub_last_activity_interval != 300 %}
c.JupyterHub.last_activity_interval = {{ jhc_jupyterhub_last_activity_interval }}
{% endif %}

# Specify path to a logo image to override the Jupyter logo in the banner.
{% if jhc_jupyterhub_logo_file != '' %}
c.JupyterHub.logo_file = '{{ jhc_jupyterhub_logo_file }}'
{% endif %}

# File to write PID Useful for daemonizing jupyterhub.
{% if jhc_jupyterhub_pid_file != '' %}
c.JupyterHub.pid_file = '{{ jhc_jupyterhub_pid_file }}'
{% endif %}

# The public facing port of the proxy
{% if jhc_jupyterhub_port != 8000 %}
c.JupyterHub.port = {{ jhc_jupyterhub_port }}
{% endif %}

# The ip for the proxy API handlers
{% if jhc_jupyterhub_proxy_api_ip != '127.0.0.1' %}
c.JupyterHub.proxy_api_ip = '{{ jhc_jupyterhub_proxy_api_ip }}'
{% endif %}

# The port for the proxy API handlers
{% if jhc_jupyterhub_proxy_api_port != 0 %}
c.JupyterHub.proxy_api_port = {{ jhc_jupyterhub_proxy_api_port }}
{% endif %}

# The Proxy Auth token.
#
# Loaded from the CONFIGPROXY_AUTH_TOKEN env variable by default.
{% if jhc_jupyterhub_proxy_auth_token != '' %}
c.JupyterHub.proxy_auth_token = '{{ jhc_jupyterhub_proxy_auth_token }}'
{% endif %}

# Interval (in seconds) at which to check if the proxy is running.
{% if jhc_jupyterhub_proxy_check_interval != 30 %}
c.JupyterHub.proxy_check_interval = {{ jhc_jupyterhub_proxy_check_interval }}
{% endif %}

# The command to start the http proxy.
#
# Only override if configurable-http-proxy is not on your PATH
{% if jhc_jupyterhub_proxy_cmd != ['configurable-http-proxy'] %}
c.JupyterHub.proxy_cmd = ['{{ jhc_jupyterhub_proxy_cmd|join("', '") }}']
{% endif %}

# Purge and reset the database.
{% if jhc_jupyterhub_reset_db != False %}
c.JupyterHub.reset_db = {{ jhc_jupyterhub_reset_db }}
{% endif %}

# The class to use for spawning single-user servers.
#
# Should be a subclass of Spawner.
{% if jhc_jupyterhub_spawner_class != 'jupyterhub.spawner.LocalProcessSpawner' %}
c.JupyterHub.spawner_class = '{{ jhc_jupyterhub_spawner_class }}'
{% endif %}

# Path to SSL certificate file for the public facing interface of the proxy
#
# Use with ssl_key
{% if _jhc_ssl_cert != '' %}
c.JupyterHub.ssl_cert = '{{ _jhc_ssl_cert }}'
{% endif %}

# Path to SSL key file for the public facing interface of the proxy
#
# Use with ssl_cert
{% if _jhc_ssl_key != '' %}
c.JupyterHub.ssl_key = '{{ _jhc_ssl_key }}'
{% endif %}

# Host to send statds metrics to
{% if jhc_jupyterhub_statsd_host != '' %}
c.JupyterHub.statsd_host = '{{ jhc_jupyterhub_statsd_host }}'
{% endif %}

# Port on which to send statsd metrics about the hub
{% if jhc_jupyterhub_statsd_port != 8125 %}
c.JupyterHub.statsd_port = {{ jhc_jupyterhub_statsd_port }}
{% endif %}

# Prefix to use for all metrics sent by jupyterhub to statsd
{% if jhc_jupyterhub_statsd_prefix != 'jupyterhub' %}
c.JupyterHub.statsd_prefix = '{{ jhc_jupyterhub_statsd_prefix }}'
{% endif %}

# Run single-user servers on subdomains of this host.
#
# This should be the full https://hub.domain.tld[:port]
#
# Provides additional cross-site protections for javascript served by single-
# user servers.
#
# Requires <username>.hub.domain.tld to resolve to the same host as
# hub.domain.tld.
#
# In general, this is most easily achieved with wildcard DNS.
#
# When using SSL (i.e. always) this also requires a wildcard SSL certificate.
{% if jhc_jupyterhub_subdomain_host != '' %}
c.JupyterHub.subdomain_host = '{{ jhc_jupyterhub_subdomain_host }}'
{% endif %}

# Paths to search for jinja templates.
{% if jhc_jupyterhub_template_paths != [] %}
c.JupyterHub.template_paths = ['{{ jhc_jupyterhub_template_paths|join("', '") }}']
{% endif %}

# Extra settings overrides to pass to the tornado application.
{% if jhc_jupyterhub_tornado_settings != {} %}
c.JupyterHub.tornado_settings = {
  {% for key, val in jhc_jupyterhub_tornado_settings.items()[:-1] %}
    '{{ key }}': '{{ val }}',
  {% endfor %}
  {% for key, val in jhc_jupyterhub_tornado_settings.items()[-1:] %}
    '{{ key }}': '{{ val }}'
  {% endfor %}
}
{% endif %}

#------------------------------------------------------------------------------
# Spawner configuration
#------------------------------------------------------------------------------

# Base class for spawning single-user notebook servers.
#
# Subclass this, and override the following methods:
#
# - load_state - get_state - start - stop - poll

# Extra arguments to be passed to the single-user server
{% if jhc_spawner_args != [] %}
c.Spawner.args = ['{{ jhc_spawner_args|join("', '") }}']
{% endif %}

# The command used for starting notebooks.
{% if jhc_spawner_cmd != ['jupyterhub-singleuser'] %}
c.Spawner.cmd = ['{{ jhc_spawner_cmd|join("', '") }}']
{% endif %}

# Enable debug-logging of the single-user server
{% if jhc_spawner_debug != False %}
c.Spawner.debug = {{ jhc_spawner_debug }}
{% endif %}

# The default URL for the single-user server.
#
# Can be used in conjunction with --notebook-dir=/ to enable  full filesystem
# traversal, while preserving user's homedir as landing page for notebook
#
# `%U` will be expanded to the user's username
{% if jhc_spawner_default_url != '' %}
c.Spawner.default_url = '{{ jhc_spawner_default_url }}'
{% endif %}

# Disable per-user configuration of single-user servers.
#
# This prevents any config in users' $HOME directories from having an effect on
# their server.
{% if jhc_spawner_disable_user_config != False %}
c.Spawner.disable_user_config = {{ jhc_spawner_disable_user_config }}
{% endif %}

# Whitelist of environment variables for the subprocess to inherit
{% if jhc_spawner_env_keep != ['PATH', 'PYTHONPATH', 'CONDA_ROOT', 'CONDA_DEFAULT_ENV', 'VIRTUAL_ENV', 'LANG', 'LC_ALL'] %}
c.Spawner.env_keep = ['{{ jhc_spawner_env_keep|join("', '") }}']
{% endif %}

# Environment variables to load for the Spawner.
#
# Value could be a string or a callable. If it is a callable, it will be called
# with one parameter, which will be the instance of the spawner in use. It
# should quickly (without doing much blocking operations) return a string that
# will be used as the value for the environment variable.
{% if jhc_spawner_environment != {} %}
c.Spawner.environment = {
  {% for key, val in jhc_spawner_environment.items()[:-1] %}
    '{{ key }}': '{{ val }}',
  {% endfor %}
  {% for key, val in jhc_spawner_environment.items()[-1:] %}
    '{{ key }}': '{{ val }}'
  {% endfor %}
}
{% endif %}

# Timeout (in seconds) before giving up on a spawned HTTP server
#
# Once a server has successfully been spawned, this is the amount of time we
# wait before assuming that the server is unable to accept connections.
{% if jhc_spawner_http_timeout != 30 %}
c.Spawner.http_timeout = {{ jhc_spawner_http_timeout }}
{% endif %}

# The IP address (or hostname) the single-user server should listen on
{% if jhc_spawner_ip != '127.0.0.1' %}
c.Spawner.ip = '{{ jhc_spawner_ip }}'
{% endif %}

# The notebook directory for the single-user server
#
# `~` will be expanded to the user's home directory `%U` will be expanded to the
# user's username
{% if jhc_spawner_notebook_dir != '' %}
c.Spawner.notebook_dir = '{{ jhc_spawner_notebook_dir }}'
{% endif %}

# An HTML form for options a user can specify on launching their server. The
# surrounding `<form>` element and the submit button are already provided.
#
# For example:
#
#     Set your key:
#     <input name="key" val="default_key"></input>
#     <br>
#     Choose a letter:
#     <select name="letter" multiple="true">
#       <option value="A">The letter A</option>
#       <option value="B">The letter B</option>
#     </select>
{% if jhc_spawner_options_form != '' %}
c.Spawner.options_form = '{{ jhc_spawner_options_form }}'
{% endif %}

# Interval (in seconds) on which to poll the spawner.
{% if jhc_spawner_poll_interval != 30 %}
c.Spawner.poll_interval = {{ jhc_spawner_poll_interval }}
{% endif %}

# Timeout (in seconds) before giving up on the spawner.
#
# This is the timeout for start to return, not the timeout for the server to
# respond. Callers of spawner.start will assume that startup has failed if it
# takes longer than this. start should return when the server process is started
# and its location is known.
{% if jhc_spawner_start_timeout != 60 %}
c.Spawner.start_timeout = {{ jhc_spawner_start_timeout }}
{% endif %}

#------------------------------------------------------------------------------
# LocalProcessSpawner configuration
#------------------------------------------------------------------------------

# A Spawner that just uses Popen to start local processes as users.
#
# Requires users to exist on the local system.
#
# This is the default spawner for JupyterHub.

# Seconds to wait for process to halt after SIGINT before proceeding to SIGTERM
{% if jhc_local_process_spawner_interrupt_timeout != 10 %}
c.LocalProcessSpawner.INTERRUPT_TIMEOUT = {{ jhc_local_process_spawner_interrupt_timeout }}
{% endif %}

# Seconds to wait for process to halt after SIGKILL before giving up
{% if jhc_local_process_spawner_kill_timeout != 5 %}
c.LocalProcessSpawner.KILL_TIMEOUT = {{ jhc_local_process_spawner_kill_timeout }}
{% endif %}

# Seconds to wait for process to halt after SIGTERM before proceeding to SIGKILL
{% if jhc_local_process_spawner_term_timeout != 5 %}
c.LocalProcessSpawner.TERM_TIMEOUT = {{ jhc_local_process_spawner_term_timeout }}
{% endif %}

#------------------------------------------------------------------------------
# Authenticator configuration
#------------------------------------------------------------------------------

# A class for authentication.
#
# The primary API is one method, `authenticate`, a tornado coroutine for
# authenticating users.

# set of usernames of admin users
#
# If unspecified, only the user that launches the server will be admin.
{% if jhc_authenticator_admin_users != [] %}
c.Authenticator.admin_users = {'{{ jhc_authenticator_admin_users|join("', '") }}'}
{% endif %}

# Dictionary mapping authenticator usernames to JupyterHub users.
#
# Can be used to map OAuth service names to local users, for instance.
#
# Used in normalize_username.
{% if jhc_authenticator_username_map != {} %}
c.Authenticator.username_map = {
  {% for key, val in jhc_authenticator_username_map.items()[:-1] %}
    '{{ key }}': '{{ val }}',
  {% endfor %}
  {% for key, val in jhc_authenticator_username_map.items()[-1:] %}
    '{{ key }}': '{{ val }}'
  {% endfor %}
}
{% endif %}

# Regular expression pattern for validating usernames.
#
# If not defined: allow any username.
{% if jhc_authenticator_username_pattern != '' %}
c.Authenticator.username_pattern = '{{ jhc_authenticator_username_pattern }}'
{% endif %}

# Username whitelist.
#
# Use this to restrict which users can login. If empty, allow any user to
# attempt login.
{% if jhc_authenticator_whitelist != [] %}
c.Authenticator.whitelist = {'{{ jhc_authenticator_whitelist|join("', '") }}'}
{% endif %}

#------------------------------------------------------------------------------
# LocalAuthenticator configuration
#------------------------------------------------------------------------------

# Base class for Authenticators that work with local Linux/UNIX users
#
# Checks for local users, and can attempt to create them if they exist.

# The command to use for creating users as a list of strings.
#
# For each element in the list, the string USERNAME will be replaced with the
# user's username. The username will also be appended as the final argument.
#
# For Linux, the default value is:
#
#     ['adduser', '-q', '--gecos', '""', '--disabled-password']
#
# To specify a custom home directory, set this to:
#
#     ['adduser', '-q', '--gecos', '""', '--home', '/customhome/USERNAME',
# '--disabled-password']
#
# This will run the command:
#
# adduser -q --gecos "" --home /customhome/river --disabled-password river
#
# when the user 'river' is created.
{% if jhc_local_authenticator_add_user_cmd != [] %}
c.LocalAuthenticator.add_user_cmd = ['{{ jhc_local_authenticator_add_user_cmd|join("', '") }}']
{% endif %}

# If a user is added that doesn't exist on the system, should I try to create
# the system user?
{% if jhc_local_authenticator_create_system_users != False %}
c.LocalAuthenticator.create_system_users = {{ jhc_local_authenticator_create_system_users }}
{% endif %}

# Automatically whitelist anyone in this group.
{% if jhc_local_authenticator_group_whitelist != [] %}
c.LocalAuthenticator.group_whitelist = {'{{ jhc_local_authenticator_group_whitelist|join("', '") }}'}
{% endif %}

#------------------------------------------------------------------------------
# PAMAuthenticator configuration
#------------------------------------------------------------------------------

# Authenticate local Linux/UNIX users with PAM

# The encoding to use for PAM
{% if jhc_pam_authenticator_encoding != 'utf8' %}
c.PAMAuthenticator.encoding = '{{ jhc_pam_authenticator_encoding }}'
{% endif %}

# Whether to open PAM sessions when spawners are started.
#
# This may trigger things like mounting shared filsystems, loading credentials,
# etc. depending on system configuration, but it does not always work.
#
# It can be disabled with::
#
{% if jhc_pam_authenticator_open_sessions != True %}
c.PAMAuthenticator.open_sessions = {{ jhc_pam_authenticator_open_sessions }}
{% endif %}

# The PAM service to use for authentication.
{% if jhc_pam_authenticator_service != 'login' %}
c.PAMAuthenticator.service = '{{ jhc_pam_authenticator_service }}'
{% endif %}
